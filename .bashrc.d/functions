#
# bash functions
#
# Inspired by many, including:
# https://raw.githubusercontent.com/mathiasbynens/dotfiles/master/.functions (1/31/16)

# Create a new directory and enter it
#---------------------------------------
function mkd() {
    mkdir -p "$@" && cd "$_" || exit;
}


# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
#--------------------------------------------
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar using \`${cmd}\`â€¦";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";
    echo "${tmpFile}.gz created successfully.";
}

# Run `dig` and display the most useful info
#----------------------------------------------
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
#---------------------------------------------------------------------------------
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" --timefmt "%m-%d %H:%M" | less -FRNX;
}


# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
#--------------------------------------------
function extract() {
    if [ -f "$1" ] ; then
        local filename, foldername, fullpath, didfolderexist
        filename=$(basename "$1")
        foldername="${filename%%.*}"
        fullpath=$(perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1")
        didfolderexist=false
        if [ -d "$foldername" ]; then
            didfolderexist=true
            read -p -r "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
            echo
            if [[ $REPLY =~ ^[Nn]$ ]]; then
                return
            fi
        fi
        mkdir -p "$foldername" && cd "$foldername" || exit
        case $1 in
            *.tar.bz2) tar xjf "$fullpath" ;;
            *.tar.gz) tar xzf "$fullpath" ;;
            *.tar.xz) tar Jxvf "$fullpath" ;;
            *.tar.Z) tar xzf "$fullpath" ;;
            *.tar) tar xf "$fullpath" ;;
            *.taz) tar xzf "$fullpath" ;;
            *.tb2) tar xjf "$fullpath" ;;
            *.tbz) tar xjf "$fullpath" ;;
            *.tbz2) tar xjf "$fullpath" ;;
            *.tgz) tar xzf "$fullpath" ;;
            *.txz) tar Jxvf "$fullpath" ;;
            *.zip) unzip "$fullpath" ;;
            *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}


# find a file with a given string pattern
#----------------------------------------
function ff() { find . -readable -iname '*'"$*"'*' -print 2>/dev/null ; }

function man() {
  LESS_TERMCAP_md=$'\e[01;36m' \
  LESS_TERMCAP_me=$'\e[0m' \
  LESS_TERMCAP_se=$'\e[0m' \
  LESS_TERMCAP_so=$'\e[40;48;5;32m' \
  LESS_TERMCAP_ue=$'\e[01;37m' \
  LESS_TERMCAP_us=$'\e[01;32m' \
  command man "$@"
}

# https://unix.stackexchange.com/questions/350558/how-do-i-filter-by-stat-with-ps
ps-filter-stat() {
   # D    uninterruptible sleep (usually IO)
   # I    Idle kernel thread
   # R    running or runnable (on run queue)
   # S    interruptible sleep (waiting for an event to complete)
   # T    stopped by job control signal
   # t    stopped by debugger during the tracing
   # W    paging (not valid since the 2.6.xx kernel)
   # X    dead (should never be seen)
   # Z    defunct ("zombie") process, terminated but not reaped by its parent
    
   ps -aux | awk {'if ($8 ==  "'"$1"'") print $2,$8" "$11'}
}

# https://stackoverflow.com/questions/953481/find-and-restore-a-deleted-file-in-a-git-repository
git-show-deleted() {
  git log --diff-filter=D --summary
}

# vim: ft=sh
